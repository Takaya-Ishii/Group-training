<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "com.example.demo.repository.UserMapper">

<resultMap id = "Userdetialselect" type = "com.example.demo.entity.Authentication">
<id property = "username" column = "username"/>
<result property = "account_name" column = "account_name"/>
<result property = "password" column ="password"/>
<result property = "TEL" column ="TEL"/>
<result property = "gender" column ="gender"/>
<result property = "affiriation" column ="affiriation"/>
<result property = "address" column ="address"/>
<result property = "departOfOrigin" column ="departOfOrigin"/>
<result property = "role_ID" column ="role_ID"/>

<association property = "role" javaType="com.example.demo.entity.Role">
<id property ="role_ID" column = "role_ID"/>
<result property = "role_name" column = "role_name"/>
</association>

<collection property = "group" javaType ="com.example.demo.entity.Group">
<id property = "group_ID" column = "group_ID"/>
<result property = "group_name" column = "group_name"/>
<result property = "summary" column ="summary"/>
</collection>
</resultMap>

<resultMap id = "UserAllselect" type = "com.example.demo.entity.Authentication">
<id property = "username" column = "username"/>
<result property = "account_name" column = "account_name"/>
<result property = "password" column ="password"/>
<result property = "TEL" column ="TEL"/>
<result property = "gender" column ="gender"/>
<result property = " affiriation" column =" affiriation"/>
<result property = "address " column =" address"/>
<result property = "departOfOrigin" column ="departOfOrigin"/>
<result property = "role_ID" column ="role_ID"/>

<association property = "role" javaType="com.example.demo.entity.Role">
<id property ="role_ID" column = "role_ID"/>
<result property = "role_name" column = "role_name"/>
</association>
</resultMap>

<resultMap id ="InsertUser" type="com.example.demo.entity.Authentication">
<id property = "username" column = "username"/>
<result property = "account_name" column = "account_name"/>
<result property = "password" column ="password"/>
<result property = "TEL" column ="TEL"/>
<result property = "gender" column ="gender"/>
<result property = " affiriation" column =" affiriation"/>
<result property = "address " column =" address"/>
<result property = "departOfOrigin" column ="departOfOrigin"/>
<result property = "role_ID" column ="role_ID"/>

<association property = "member" javaType="com.example.demo.entity.Member">
<id property ="username" column = "username"/>
<result property = "group_ID" column = "group_ID"/>
<result property = "group_user_ID" column = "group_user_ID"/>
<result property = "isTeacher" column = "isTeacher"/>
</association>

<association property = "role" javaType="com.example.demo.entity.Role">
<id property ="role_ID" column = "role_ID"/>
<result property = "role_name" column = "role_name"/>
</association>

</resultMap>

<!-- ユーザーIDを全てSELECT -->
<select id="selectAll" resultMap="UserAllselect">
SELECT P.username,P.account_name,P.password,P.TEL,P.gender,P.affiriation,P.address,P.departOfOrigin,R.role_name
FROM profile_table as P
Join role_table as R
ON R.role_ID = P.role_ID; 
</select>

<!-- ユーザーを検索ボックスで情報を検索 -->
<select id = "selectByBox" resultMap="UserAllselect">
SELECT P.username, P.account_name, R.role_name
FROM profile_table as P
LEFT Join role_table as R
ON R.role_ID = P.role_ID 
    	<where>
    	<trim prefixOverrides="AND">
    		<if test="username != null and username != ''">
    			AND username like '%'|| #{username} || '%'
    		</if>
    		<if test="account_name != null and account_name != ''">
    			AND account_name like '%' || #{account_name} || '%'
    		</if>
    		</trim>
    	</where>
</select>

<!-- 一人のユーザーをユーザー名で検索 -->
<select id = "selectByrole" resultType="com.example.demo.entity.Authentication">
 SELECT P.username, P.account_name
FROM profile_table as P
LEFT Join role_table as R
ON R.role_ID = P.role_ID
WHERE account_name = #{account_name}
</select>

<!--一つのユーザーの詳細表示-->
<select id="selectdetailById" resultMap = "Userdetialselect">
SELECT 
	P.username, 
	P.account_name, 
	P.TEL,  
	P.address,
	P.gender,
	P.affiriation,
	P.password,
	P.departOfOrigin, 
	R.role_name,
	G.group_name,
	R.role_name
from profile_table as P
Join member_table as M
ON P.username = M.username
JOIN group_table as G
ON G.group_ID = M.group_ID 
LEFT Join role_table as R
ON R.role_ID = P.role_ID
where P.username = #{username};
</select>

<!-- 全てのユーザーIDを取得 -->
<select id="selectAllID" resultType = "com.example.demo.entity.Authentication">
SELECT username 
from profile_table
WHERE username = #{username}

</select>

<!-- 全ての電話番号を取得 -->
<select id="selectTEL" resultType ="com.example.demo.entity.Authentication">
SELECT *
from profile_table
where TEL = #{TEL}
</select>

<!-- 全てのグループ名とそのグループIDを取得 -->
<select id ="findAllGroup" resultType="com.example.demo.entity.Group">
SELECT group_name,group_ID
FROM group_table
ORDER BY group_ID;
</select>

<!-- 全てのロール名とロールIDを取得 -->
<select id = "findAllRole" resultType="com.example.demo.entity.Role">
SELECT role_ID,role_name
FROM role_table
order by role_ID;


</select>
<!-- ユーザーデータをプロフィールテーブルに新規登録する -->
<insert id="insert" parameterType="com.example.demo.entity.Authentication">
INSERT INTO profile_table (username,account_name,password,TEL,address,gender,affiriation,departOfOrigin,
role_ID)
VALUES
(#{username},#{account_name},#{password},#{TEL},#{address},#{gender},#{affiriation},#{departOfOrigin},
#{role_ID});
</insert>

<!-- ユーザーデータをメンバーテーブルに登録する -->
<insert id="insertPlus" parameterType="com.example.demo.entity.Member">
INSERT INTO member_table (group_user_ID, group_ID,username,isTeacher)
VALUES
((SELECT MAX(group_user_ID) FROM member_table) +1, #{member.group_ID},#{user.username},(CAST (CASE #{user.role_ID} WHEN 1 THEN 'FALSE' ELSE 'TRUE' END AS BOOLEAN)));
</insert>

<!-- プロフィールテーブルのユーザーデータを編集する -->
<update id="update" parameterType="com.example.demo.entity.Authentication">
UPDATE profile_table 

SET account_name = #{account_name},password = #{password},TEL = #{TEL}, address = #{address}, gender = #{gender}, affiriation=#{affiriation}, 
departOfOrigin = #{departOfOrigin}, role_ID = #{role_ID} 

WHERE username = #{username};

</update>

<!-- メンバーテーブルのユーザーデータを編集する -->
<update id="updateMember" parameterType="com.example.demo.entity.Member">
UPDATE member_table
SET group_ID = #{member.group_ID}
WHERE username = #{user.username};
</update>

<!-- ユーザーデータを削除する -->
<delete id="delete">
DELETE FROM profile_table WHERE username = #{username};
</delete>
</mapper>